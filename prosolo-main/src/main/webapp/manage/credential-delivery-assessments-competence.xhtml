<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:h="http://java.sun.com/jsf/html"
                xmlns:f="http://java.sun.com/jsf/core"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                xmlns:p="http://primefaces.org/ui"
                template="templates/masterLayout2.xhtml"
                xmlns:utilcomp="http://java.sun.com/jsf/composite/components/util"
                xmlns:util="http://www.prosolo.com/util"
                xmlns:mngComp="http://java.sun.com/jsf/composite/components/manage"
                xmlns:assessment="http://java.sun.com/jsf/composite/components/assessments"
                xmlns:c="http://java.sun.com/jsp/jstl/core">

    <ui:define name="windowTitle">
        Assessments - #{credentialCompetenceAssessmentsBeanManager.credentialTitle} - ProSolo
    </ui:define>

    <ui:define name="metadata">
        <f:metadata>
            <f:viewParam name="credentialId" value="#{credentialCompetenceAssessmentsBeanManager.credId}"
                         default="null"/>
            <f:viewParam name="competenceId" value="#{credentialCompetenceAssessmentsBeanManager.compId}"
                         default="null"/>
            <f:viewParam name="p" value="#{credentialCompetenceAssessmentsBeanManager.page}" default="1"/>
            <f:viewAction action="#{credentialCompetenceAssessmentsBeanManager.init()}"/>
        </f:metadata>
    </ui:define>

    <ui:define name="resourceTitle">
        <h1>
            <span>#{msg['label.delivery']} #{credentialCompetenceAssessmentsBeanManager.credentialIdData.formattedOrder}:</span>
            #{credentialCompetenceAssessmentsBeanManager.credentialTitle}
        </h1>
    </ui:define>

    <ui:define name="navLinks">
        <mngComp:credentialsHeaderNavLinks id="headerNavLinks"
                                           credId="#{credentialCompetenceAssessmentsBeanManager.decodedCredId}"
                                           credType="Delivery"
                                           canEdit="#{credentialCompetenceAssessmentsBeanManager.canUserEditDelivery()}"/>
    </ui:define>

    <ui:define name="content">
        <script>
            function markDiscussionAsSeen(assessmentId, el, resource) {
                switch (resource) {
                    case 'ACTIVITY':
                        markActivityDiscussionRead
                        ([{
                            name: 'assessmentEncId',
                            value: assessmentId
                        }]);
                        break;
                    case 'COMPETENCE':
                        markCompetenceAssessmentDiscussionRead
                        ([{
                            name: 'assessmentEncId',
                            value: assessmentId
                        }]);
                        break;
                }
                $(el).removeClass("hasNewComments");
            }

            //comment form hide/show
            function displaySubmitButton(inputElem) {
                if ($(inputElem).val().length == 0) {
                    $(inputElem).parent().find('a.btn-green').addClass('hidden');
                } else {
                    $(inputElem).parent().find('a.btn-green').removeClass('hidden');
                }
            }

            function displaySubmitButtonPrivateConvModal(inputElem) {
                if ($(inputElem).val().length == 0) {
                    $(inputElem).parent().find('a.btn-green').addClass('hidden');
                } else {
                    $(inputElem).parent().find('a.btn-green').removeClass('hidden');
                }
            }
        </script>
        <h:form prependId="false" id="remoteCommandForm">
            <p:remoteCommand process="@this"
                             action="#{credentialCompetenceAssessmentsBeanManager.markActivityAssessmentDiscussionRead()}"
                             name="markActivityDiscussionRead"></p:remoteCommand>
            <p:remoteCommand process="@this"
                             action="#{credentialCompetenceAssessmentsBeanManager.markCompetenceAssessmentDiscussionRead()}"
                             name="markCompetenceAssessmentDiscussionRead"/>
        </h:form>

        <ui:param name="learningContext"
                  value="name:CREDENTIAL|id:#{credentialCompetenceAssessmentsBeanManager.decodedCredId}"/>

        <p:growl id="growlMain" showDetail="true" globalOnly="true"></p:growl>

        <div class="whiteBar">

        </div>

        <div class="container">
            <ol class="breadcrumb">
                <li>
                    <h:link value="#{msg['label.credential.plural']}" outcome="/manage/library"/>
                </li>
                <li>
                    <h:link value="#{util:shortenAndAddDots(credentialCompetenceAssessmentsBeanManager.credentialIdData.fullTitle)}"
                            outcome="/manage/credential"
                            onclick="sendLogPageNavigation('/manage/credential.xhtml',
						                                    '#{facesContext.viewRoot.viewId}',
							                                '#{util:addSubContext(learningContext, &#34;name:breadcrumbs&#34;)}',
							                                '');">
                        <f:param name="id" value="#{param.credentialId}"></f:param>
                    </h:link>
                </li>
                <li>
                    <h:link value="Assessments"
                            outcome="/manage/credential-delivery-assessments"
                            onclick="sendLogPageNavigation('/manage/credential-delivery-assessments.xhtml',
                                                            '#{facesContext.viewRoot.viewId}',
                                                            '#{util:addSubContext(learningContext, &#34;name:breadcrumbs&#34;)}',
                                                            '');">
                        <f:param name="id" value="#{param.credentialId}"></f:param>
                    </h:link>
                </li>
                <li class="active">
                    #{util:shortenAndAddDots(credentialCompetenceAssessmentsBeanManager.assessmentsSummary.title)}
                </li>
            </ol>
        </div>

        <div class="container">
            <div class="row">
                <div class="col-md-9">
                    <h:panelGroup id="competenceAssessmentPanel">
                        <ui:fragment rendered="#{empty credentialCompetenceAssessmentsBeanManager.assessmentsSummary.assessments.foundNodes}">
                            <div class="noContentMessage">
                                <p>
                                    No assessments.
                                </p>
                            </div>
                        </ui:fragment>
                        <h:form>
                            <ui:repeat varStatus="compAssIndex" var="competenceAssessment"
                                       value="#{credentialCompetenceAssessmentsBeanManager.assessmentsSummary.assessments.foundNodes}">
                                <assessment:competenceAssessment
                                        competenceAssessment="#{competenceAssessment}"
                                        bean="#{credentialCompetenceAssessmentsBeanManager}"
                                        credentialId="#{credentialCompetenceAssessmentsBeanManager.decodedCredId}"
                                        role="MANAGER"
                                        learningContext="#{util:addSubContext(learningContext, 'name:CREDENTIAL_ASSESSMENT|id:'.concat(competenceAssessment.credentialAssessmentId).concat('|context:/name:COMPETENCE|id:').concat(competenceAssessment.competenceId).concat('|context:/name:COMPETENCE_ASSESSMENT|id:').concat(competenceAssessment.competenceAssessmentId).concat('//'))}"
                                        growlToUpdate=":growlMain"
                                        toUpdateGradePanel=":gradePanelContainer"
                                        gradePanelSidebarId="gradeSidebar"
                                        toUpdateReadonlyRubricPanel=":rubricAssessmentPreview:panelRubricAssessment"
                                        toUpdatePrivateConversationModal=":commentModal:formPrivateConversation:panelModalPrivateConversation"
                                        currentUserAssessor="#{credentialCompetenceAssessmentsBeanManager.isUserAssessorInCurrentContext(competenceAssessment)}"
                                        currentUserAssessedStudent="#{credentialCompetenceAssessmentsBeanManager.isUserAssessedStudentInCurrentContext(competenceAssessment)}"
                                        displayStudentNameInHeader="true"
                                        approveModalId="submitCredAssessment"
                                        toUpdateApproveModal=":approveModalContainer"
                                />
                            </ui:repeat>
                        </h:form>
                    </h:panelGroup>

                    <utilcomp:pagination id="pagination"
                                         bean="#{credentialCompetenceAssessmentsBeanManager}"
                                         updateUrl="true"
                                         toUpdate="competenceAssessmentPanel"
                    />
                </div>
                <div class="col-md-3">
                    <div class="whiteBox">
                        <h2>Show</h2>
                        <h:panelGroup id="panelFilters">
                            <h:form>
                                <c:forEach items="#{credentialCompetenceAssessmentsBeanManager.filters}" var="filter"
                                           varStatus="status">
                                    <div class="checkbox checkLine">
                                        <h:selectBooleanCheckbox id="checkboxFilter#{filter.filter.name()}"
                                                                 value="#{filter.selected}">
                                            <p:ajax event="click" process="@this"
                                                    listener="#{credentialCompetenceAssessmentsBeanManager.filterChanged()}"
                                                    update="competenceAssessmentPanel :pagination"/>
                                        </h:selectBooleanCheckbox>
                                        <h:outputLabel for="checkboxFilter#{filter.filter.name()}">#{filter.filter.label}</h:outputLabel>
                                    </div>
                                </c:forEach>
                            </h:form>
                        </h:panelGroup>
                        <div class="checkLinks">
                            <p:commandLink
                                    value="Check all"
                                    action="#{credentialCompetenceAssessmentsBeanManager.checkAllFilters()}"
                                    update="competenceAssessmentPanel :pagination panelFilters">
                            </p:commandLink>
                            <span>|</span>
                            <p:commandLink
                                    value="Clear all"
                                    action="#{credentialCompetenceAssessmentsBeanManager.uncheckAllFilters()}"
                                    update="competenceAssessmentPanel :pagination panelFilters">
                            </p:commandLink>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <assessment:assessmentCommentModal id="commentModal"
                                           toUpdate=":growlMain @(.assessmentActivityList.comp_#{credentialCompetenceAssessmentsBeanManager.currentCompetenceAssessmentId}) @(.panelCompAssessment_#{credentialCompetenceAssessmentsBeanManager.currentCompetenceAssessmentId})"
                                           messages="#{credentialCompetenceAssessmentsBeanManager.currentAssessmentMessages}"
                                           bean="#{credentialCompetenceAssessmentsBeanManager.currentAssessmentBean}"
                                           studentId="#{credentialCompetenceAssessmentsBeanManager.currentStudentId}"
                                           assessorId="#{credentialCompetenceAssessmentsBeanManager.currentAssessorId}"
                                           blindAssessmentMode="#{credentialCompetenceAssessmentsBeanManager.currentBlindAssessmentMode}"
                                           readOnly="false"
                                           learningContext="#{credentialCompetenceAssessmentsBeanManager.currentResType eq 'ACTIVITY'
					? util:addSubContext(learningContext, 'name:CREDENTIAL_ASSESSMENT|id:'.concat(activityAssessmentBean.activityAssessmentData.credAssessmentId).concat('|context:/name:competence|id:').concat(activityAssessmentBean.activityAssessmentData.competenceId).concat('|context:/name:COMPETENCE_ASSESSMENT|id:').concat(activityAssessmentBean.activityAssessmentData.compAssessment.competenceAssessmentId).concat('|context:/name:activity|id:').concat(activityAssessmentBean.activityAssessmentData.activityId).concat('|context:/name:ACTIVITY_ASSESSMENT|id:').concat(activityAssessmentBean.activityAssessmentData.activityAssessmentId).concat('/').concat('/').concat('/').concat('/'))
					: util:addSubContext(learningContext, 'name:CREDENTIAL_ASSESSMENT|id:'.concat(competenceAssessmentBean.competenceAssessmentData.credentialAssessmentId).concat('|context:/name:competence|id:').concat(competenceAssessmentBean.competenceAssessmentData.competenceId).concat('|context:/name:COMPETENCE_ASSESSMENT|id:').concat(competenceAssessmentBean.competenceAssessmentData.competenceAssessmentId).concat('//'))}"
        />

        <assessment:rubricAssessmentPreview
                id="rubricAssessmentPreview"
                grade="#{credentialCompetenceAssessmentsBeanManager.currentGradeData}"
                resourceType="#{credentialCompetenceAssessmentsBeanManager.currentResType}"
                resourceTitle="#{credentialCompetenceAssessmentsBeanManager.currentResTitle}"
        />

        <h:panelGroup id="gradePanelContainer">
            <ui:param name="compAssessmentLearningContext"
                      value="#{util:addSubContext(learningContext, 'name:CREDENTIAL_ASSESSMENT|id:'.concat(competenceAssessmentBean.competenceAssessmentData.credentialAssessmentId).concat('|context:/name:competence|id:').concat(competenceAssessmentBean.competenceAssessmentData.competenceId).concat('|context:/name:COMPETENCE_ASSESSMENT|id:').concat(competenceAssessmentBean.competenceAssessmentData.competenceAssessmentId).concat('//'))}"/>
            <ui:param name="activityAssessmentLearningContext"
                      value="#{util:addSubContext(learningContext, 'name:CREDENTIAL_ASSESSMENT|id:'.concat(activityAssessmentBean.activityAssessmentData.credAssessmentId).concat('|context:/name:competence|id:').concat(activityAssessmentBean.activityAssessmentData.competenceId).concat('|context:/name:COMPETENCE_ASSESSMENT|id:').concat(activityAssessmentBean.activityAssessmentData.compAssessment.competenceAssessmentId).concat('|context:/name:ACTIVITY|id:').concat(activityAssessmentBean.activityAssessmentData.activityId).concat('|context:/name:ACTIVITY_ASSESSMENT|id:').concat(activityAssessmentBean.activityAssessmentData.activityAssessmentId).concat('////'))}"/>

            <assessment:gradePanel id="resourceGradePanel"
                                   gradeActionMethodName="updateGrade"
                                   gradeAction="#{credentialCompetenceAssessmentsBeanManager.currentAssessmentBean.updateGrade}"
                                   assessmentId="#{credentialCompetenceAssessmentsBeanManager.currentAssessmentId}"
                                   completed="#{credentialCompetenceAssessmentsBeanManager.hasStudentCompletedCurrentResource()}"
                                   gradeData="#{credentialCompetenceAssessmentsBeanManager.currentGradeData}"
                                   resource="#{credentialCompetenceAssessmentsBeanManager.currentResType}"
                                   resourceTitle="#{credentialCompetenceAssessmentsBeanManager.currentResTitle}"
                                   toUpdate=":growlMain @(.assessmentActivityList.comp_#{credentialCompetenceAssessmentsBeanManager.currentCompetenceAssessmentId}) @(.panelCompAssessment_#{credentialCompetenceAssessmentsBeanManager.currentCompetenceAssessmentId}) @(.panelAssessorNotificationSelector)"
                                   learningContext="#{credentialCompetenceAssessmentsBeanManager.currentResType == null ? '' : credentialCompetenceAssessmentsBeanManager.currentResType == 'COMPETENCE' ? compAssessmentLearningContext : activityAssessmentLearningContext}"
                                   gradePanelSidebarId="gradeSidebar"
            />
        </h:panelGroup>

        <h:panelGroup id="approveModalContainer">
            <ui:param name="compAssessmentLearningContext"
                      value="#{util:addSubContext(learningContext, 'name:CREDENTIAL_ASSESSMENT|id:'.concat(competenceAssessmentBean.competenceAssessmentData.credentialAssessmentId).concat('|context:/name:competence|id:').concat(competenceAssessmentBean.competenceAssessmentData.competenceId).concat('|context:/name:COMPETENCE_ASSESSMENT|id:').concat(competenceAssessmentBean.competenceAssessmentData.competenceAssessmentId).concat('//'))}"/>

            <assessment:approveAssessment id="approveCompetenceAssessment"
                                          blindAssessmentMode="#{competenceAssessmentBean.competenceAssessmentData.blindAssessmentMode}"
                                          approveAction="#{competenceAssessmentBean.approveCompetence()}"
                                          gradeData="#{competenceAssessmentBean.competenceAssessmentData.gradeData}"
                                          resourceTitle="#{competenceAssessmentBean.competenceAssessmentData.title}"
                                          student="#{competenceAssessmentBean.studentData}"
                                          resource="COMPETENCE"
                                          toUpdate=":growlMain @(.panelAssessorNotificationSelector) @(.assessmentActivityList.comp_#{competenceAssessmentBean.competenceAssessmentData.competenceAssessmentId}) @(.panelCompAssessment_#{competenceAssessmentBean.competenceAssessmentData.competenceAssessmentId})"
                                          learningContext="#{compAssessmentLearningContext}"
            />
        </h:panelGroup>
    </ui:define>
</ui:composition>
