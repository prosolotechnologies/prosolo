<ui:component
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:p="http://primefaces.org/ui"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:composite="http://java.sun.com/jsf/composite"
	xmlns:comp="http://java.sun.com/jsf/composite/components"
	xmlns:dlg="http://java.sun.com/jsf/composite/components/dialogs"
	xmlns:action="http://java.sun.com/jsf/composite/components/actions"
	xmlns:link="http://java.sun.com/jsf/composite/components/resourceLinks"
	xmlns:socialWall="http://java.sun.com/jsf/composite/components/socialWall"
	xmlns:utilcomp="http://java.sun.com/jsf/composite/components/util"
	xmlns:post="http://java.sun.com/jsf/composite/components/post"
	xmlns:pt="http://java.sun.com/jsf/passthrough">

	<!-- 
		actionBean: must have method for adding an activity to a competence with the following signature:
					void connectActivity(Activity)
	-->

	<composite:interface>
		<composite:attribute name="parentComponent" />
		<composite:attribute name="loadingMsg" required="false" default="Loading activities..."/>
		<composite:attribute name="updateAfterDelete" required="false"/>
		<composite:attribute name="addCommentMsg" required="false" default="Add a comment..."/>
		<composite:attribute name="allActivities" required="true"/>
		<composite:attribute name="hideOptions" default="false" />
		<composite:attribute name="readOnly" default="false" />
		<composite:attribute name="context" />
		<composite:attribute name="refreshCommandAfterConnect" />
		<composite:attribute name="activityStyleClass" default="" />
		<composite:attribute name="initializeHandler" 
			method-signature="void initializeActivities()"
			required="true" />
			
	</composite:interface>
	
	<composite:implementation>
		
		<p:growl id="activityWallGrowl" showDetail="true" />
		<p:commandLink styleClass="refreshAllHanler" 
			style="display:none;"
			action="#{cc.attrs.initializeHandler != null ? cc.attrs.initializeHandler : ''}"
			process="@this"
			update=":#{cc.clientId}:#{cc.attrs.value}" 
			oncomplete="$('.act').show();prosolo.overlay.reset();" 
		/>
		
		<h:panelGroup layout="block" id="#{cc.attrs.value}" class="#{cc.attrs.value}">
			<h:panelGroup layout="block" rendered="#{empty cc.attrs.allActivities}" class="noContentMessage marginTop10">
				There are no activities for this competence.
			</h:panelGroup>
			<ui:repeat id="activitiesRepeat" value="#{cc.attrs.allActivities}" var="actIterator" varStatus="actIteratorStatus">
				
				<ui:param name="contextRoot" value="#{cc.attrs.context}.targetActivity.#{actIterator.id}" />
			
				<h:panelGroup layout="block" id="act" class="act act#{actIteratorStatus.index} #{cc.attrs.activityStyleClass}" pt:context="#{contextRoot}">
						
					<div class="actStatus">
						
						<h:panelGroup id="completedAction" rendered="#{!cc.attrs.readOnly}">
							<p:commandLink rendered="#{!actIterator.completed}"
								styleClass="iconUnCheck"
								action="#{compwall.completeActivity(actIterator, contextRoot)}"
								process="@this"
								update="completedAction :goalDetails :activities:competenceDetails" />
								
							<p:commandLink rendered="#{actIterator.completed}"
								styleClass="iconCheck"
								action="#{compwall.uncompleteActivity(actIterator, contextRoot)}"
								process="@this"
								update="completedAction :goalDetails :activities:competenceDetails" />
						</h:panelGroup>
						
						<h:panelGroup rendered="#{cc.attrs.readOnly}">
							<h:panelGroup rendered="#{!actIterator.completed}">
								<span class="iconUnCheck hasTooltip" 
									title="#{tooltips.getActionDisabledText(actIterator.canNotBeMarkedAsCompleted.toString().concat('_CHECK'))}"></span>
							</h:panelGroup>
							
							<h:panelGroup rendered="#{actIterator.completed}">
								<span class="iconCheck hasTooltip" 
									title="#{tooltips.getActionDisabledText(actIterator.canNotBeMarkedAsCompleted.toString().concat('_UNCHECK'))}"></span>
							</h:panelGroup>
						</h:panelGroup>
					</div>
					
					<div class="actBlock">
					
						<h:panelGroup rendered="#{!cc.attrs.readOnly}">
							<ul class="actOpt">
								<li>
									<a href="javascript:void(0);" 
										onclick="sendServiceUse('MOUSE_CLICK', {context: '#{contextRoot}', link: 'optionsOpen'})"
										class="actOptArrow">postopt</a>
									
									<div class="dropdown hidden">
										<ul>
											<ui:remove>
											<li>
												<p:commandLink
													update=":#{cc.clientId}:activityWallGrowl"
													oncomplete="refreshCompetenceActivityWall()"
													process="@this">
													Edit activity
												</p:commandLink>
											</li>
											</ui:remove>
											<li>
												<p:commandLink
													onclick="prosolo.overlay.activate();"
													action="#{compwall.deleteActivity(actIterator, contextRoot)}"
													process="@this"
													update=":#{cc.clientId}:activityWallGrowl #{cc.attrs.updateAfterDelete} 
														:activities:competenceDetails :goalDetails"
													oncomplete="refreshCompetenceActivityWall();">
													Remove this activity
												</p:commandLink>
											</li>
										</ul>
									</div>
								</li>
							</ul>
						</h:panelGroup>
						
						<p:commandLink rendered="#{cc.attrs.readOnly}"
							styleClass="#{actIterator.canBeAdded ? 'green' : 'gray'} button size24 right addBtn" 
							value="#{actIterator.canBeAdded ? 'Add' : 'Added'}"
							disabled="#{!actIterator.canBeAdded}"
							action="#{cc.attrs.actionBean.connectActivityWallData(actIterator, cc.attrs.context)}"
							process="@this"
							update="@this :#{cc.clientId}:activityWallGrowl"
							oncomplete="#{cc.attrs.refreshCommandAfterConnect}" />
						
						<p class="title">
							#{actIterator.activity.title}
						</p>
						
						<p class="description">
							<h:outputText value="#{actIterator.activity.description}" escape="false" />
						</p>	
						<socialWall:attachmentPreview 
							attachmentPreview="#{actIterator.attachmentPreview}"
							width="380"
							toRender="#{actIterator.attachmentPreview.contentType != 'UPLOAD_ASSIGNMENT'}"
							uniqueParentSelector=".#{cc.attrs.value} .act#{actIteratorStatus.index}"
							context="#{contextRoot}" />
							
						<socialWall:uploadAssignment
							activityData="#{actIterator}"
							containerClass=".#{cc.attrs.value} .actBlock"
							handleFileUploadSelector="#assignementUploadControl .ui-fileupload input"
							toRender="#{actIterator.attachmentPreview.contentType == 'UPLOAD_ASSIGNMENT'}"
							updateAfterAssignmentChange=":#{cc.clientId}:#{cc.attrs.value} :goalDetails :activities:competenceDetails"
							uniqueParentSelector=".#{cc.attrs.value} .act#{actIteratorStatus.index}"
							context="#{contextRoot}" />
						
						<socialWall:externalTool
							activityData="#{actIterator}"
							containerClass=".#{cc.attrs.value} .actBlock"
							toRender="#{actIterator.isType('EXTERNALTOOL')}"
							context="#{contextRoot}" />
						
						<h:panelGroup layout="block" id="actions" class="links">
							<p:commandLink
								rendered="#{!actIterator.liked}"
								action="#{likeaction.likeActivity(actIterator, contextRoot)}"
								process="@this"
								update="actions actionCount">
								Like
							</p:commandLink>
							<p:commandLink
								rendered="#{actIterator.liked}"
								action="#{likeaction.removeLikeActivity(actIterator, contextRoot)}"
								process="@this"
								update="actions actionCount">
								Unike
							</p:commandLink>
							<span></span>
							<p:commandLink
								rendered="#{!actIterator.disliked}"
								action="#{dislikeAction.dislikeActivity(actIterator, contextRoot)}"
								process="@this"
								update="actions actionCount">
								Dislike
							</p:commandLink>
							<p:commandLink
								rendered="#{actIterator.disliked}"
								action="#{dislikeAction.removeDislikeActivity(actIterator, contextRoot)}"
								process="@this"
								update="actions actionCount">
								Remove dislike
							</p:commandLink>
							<span></span>
							
							<action:post 
								activityId="#{actIterator.activity.id}"
								resetStyle="true"
								context="#{contextRoot}"/>
							
							<ui:remove>
								<span></span>
								<a href="#">Bookmark</a> 
							</ui:remove>
							
							<p:commandLink
								rendered="#{!cc.attrs.readOnly}"
								process="@this"
								styleClass="right relatedActButton"
								onclick="sendServiceUse('MOUSE_CLICK', {context: '#{contextRoot}.relatedActivities', link: 'open'});"
								update="actions">
								Related Actiities
							</p:commandLink>
							<script>
								$('.#{cc.attrs.value} .act#{actIteratorStatus.index} .relatedActButton').click(function() {
									if ($(this).hasClass('expanded')) {
										$(this).removeClass('expanded');
										$('.#{cc.attrs.value} .act#{actIteratorStatus.index} .relatedActs').fadeOut();
									} else {
										$(this).addClass('expanded');
										$('.#{cc.attrs.value} .act#{actIteratorStatus.index} .relatedActs').fadeIn();
									}
								});
							</script>
						</h:panelGroup>
						
						<h:panelGroup layout="block" id="commentsBox" class="commentsBox">
							<div class="arrow"></div>
						
							<div class="comments">
								<h:panelGroup layout="block" id="actionCount" class="likes">
									<h:panelGroup layout="block" rendered="#{actIterator.likeCount > 0}">
										Liked by
										<p:commandLink
											value="#{actIterator.likeCount} people"
											action="#{peopleListDialog.initializePeopleWhoLikedNodeById(actIterator.activity.id, cc.attrs.context.concat('.activity.').concat(actIterator.id))}"
											process="@this"
											onclick="$('#peopleListDialog').dialog('open');"
											update=":peopleListForm"
										/>
									</h:panelGroup>
									<h:panelGroup layout="block" rendered="#{actIterator.likeCount > 0 and actIterator.dislikeCount > 0}">
										<span></span>
									</h:panelGroup>
									<h:panelGroup layout="block" rendered="#{actIterator.dislikeCount > 0}">
										Disliked by
										<p:commandLink
											value="#{actIterator.dislikeCount} people"
											onclick="$('#peopleListDialog').dialog('open');"
											action="#{peopleListDialog.initializePeopleWhoDislikedNodeById(actIterator.activity.id, cc.attrs.context.concat('.activity.').concat(actIterator.id))}"
											process="@this"
											update=":peopleListForm"
										/>
									</h:panelGroup>
									<h:panelGroup layout="block" rendered="#{actIterator.dislikeCount > 0 and actIterator.shareCount > 0}">
										<span></span>
									</h:panelGroup>
									<h:panelGroup layout="block" rendered="#{actIterator.shareCount > 0}">
										Shared by <h:commandLink value="#{actIterator.shareCount}"> people</h:commandLink><span></span>
									</h:panelGroup>
									
									<ui:remove>
										<h:panelGroup layout="block" rendered="#{actIterator.bookmarkCount > 0 and actIterator.shareCount > 0}">
											<span></span>
										</h:panelGroup>
										<h:panelGroup layout="block" rendered="#{actIterator.bookmarkCount > 0}">
											Bookmarked by <h:commandLink value="#{actIterator.bookmarkCount}"> people</h:commandLink><span></span>
										</h:panelGroup>
									</ui:remove>
								</h:panelGroup>
								
								<h:panelGroup id="commentList">
									<h:panelGroup layout="block" id="commentHideControl" rendered="#{actIterator.comments.size() > 2}" class="likes expandComment">
													
										<p:commandLink value="Show #{actIterator.comments.size() - 2} #{actIterator.comments.size() == 3 ? 'comment' : 'comments'}"
											rendered="#{!actIterator.showHiddenComments}"
											action="#{actIterator.setShowHiddenComments(true)}"
											update="commentHideControl"
											process="@this"
										/>
										<p:commandLink value="Hide #{actIterator.comments.size() - 2} #{actIterator.comments.size() == 3 ? 'comment' : 'comments'}"
											rendered="#{actIterator.showHiddenComments}"
											action="#{actIterator.setShowHiddenComments(false)}"
											update="commentHideControl"
											process="@this"
										/>
										
										<script>
										var expandComments = $('.#{cc.attrs.value} .act#{actIteratorStatus.index} .expandComment');
										if (expandComments) {
											expandComments.click(function(){
												$('.#{cc.attrs.value} .act#{actIteratorStatus.index} .comment.collapsible').toggle();
											});
										}
										</script>
									</h:panelGroup>
									
									<ui:repeat id="commentLoop" value="#{actIterator.comments}" var="commentIterator" varStatus="commentIteratorStatus">
										<post:comment 
											commentData="#{commentIterator}" 
											idPrefix="#{iterator.index}I#{commentIteratorStatus.index}"
											context="#{contextRoot}"
											styleClass="#{actIterator.comments.size() - commentIteratorStatus.index > 2 ? 'collapsible' : ''}" />
									</ui:repeat>
									
									<script>
										roundImages();
										$('.#{cc.attrs.value} .act#{iterator.index} .comment .commentText').shortenedText({showChar: 120});
										
										if (#{!actIterator.showHiddenComments}) {
											$('.#{cc.attrs.value} .act#{actIteratorStatus.index} .comment.collapsible').hide();
										}

									</script>
								</h:panelGroup>
								
								<div class="addComment">
									<div class="addCommentBox">
										<div class="inactiveBox">
											<div class="watermark"></div>
										</div>
										
										<div class="expandableInputBox collapsed">
											<div class="watermark"></div>
											<div class='inputTextField' contenteditable="true"></div>
											
											<h:inputTextarea id="commentContent" class="inputTextFieldHidden hidden" value="#{actIterator.newComment}" />
											
											<div class="postButtonBox">
												<p:commandLink styleClass="postButton button green size25" 
													value="post"
													action="#{commentaction.newComment(actIterator, cc.attrs.context.concat('.activity.').concat(actIterator.id).concat('.newComment'))}"
													update="newCommentGrowl commentList">
												</p:commandLink>
												
												<a class="cancelButton button gray size25"
													onclick="sendServiceUse('MOUSE_CLICK', {context: '#{contextRoot}.newComment', link: 'cancel'})">Cancel</a>
											</div>
											<div class="clear"></div>
										</div>
										<p:growl id="newCommentGrowl" showDetail="true" />
									</div>
								</div>
							</div>
						</h:panelGroup>
					</div>
					<div class="clear"></div>
					
					<h:panelGroup layout="block" id="relatedActsForm">
						<h:panelGroup layout="block" id="relatedActsFormContainer"
							class="relatedActs" style="display: none;">
							
							<a class="closeIcon"
								onclick="$('.goalsPage .relatedActs').fadeOut();sendServiceUse('MOUSE_CLICK', {context: '#{contextRoot}.relatedActivities', link: 'close'});"></a>
							<h3>
								Related Activities
								<utilcomp:infotooltip 
									position="RELATED_ACTIVITIES" 
									context="#{contextRoot}.relatedActivities" />
							</h3>
							<div class="clear"></div>
						
							<div class="recommendedActContainer">
								<h:panelGroup layout="block" class="noContentMessage" 
									rendered="#{empty learninggoals.selectedGoalData.selectedCompetence.retrieveRelatedActivities(actIterator)}">
									No related activities
								</h:panelGroup>
							
								<ui:repeat id="activitiesRepeat" 
									value="#{learninggoals.selectedGoalData.selectedCompetence.retrieveRelatedActivities(actIterator)}" 
									var="relatedAct"
									varStatus="relatedActStatus">
								
									<div class="activity #{relatedActStatus.index == 0 ? 'first' : ''}" data-id="#{relatedAct.activity.id}">
										<div class="richContent">
											<span class="activityIcon30 hasTooltip left marginRight10"></span>
											
											<div class="actInfo actInfoLogo">
												<span class="title">#{relatedAct.activity.title}</span>
												
												<div class="clear"></div>
								
												<p class="atcDesc">
													#{relatedAct.activity.description}
												</p>
											</div>
											
											<div class="actions">
												<link:activity
													activityId="#{relatedAct.activity.id}"
													styleClass="button green size20 left"
													title="Details"  
													context="#{contextRoot}.relatedActivities.#{relatedAct.activity.id}.details" />
												
												<p:commandLink styleClass="button green size20 left" 
													value="Add Activity"
													action="#{compwall.connectActivityById(relatedAct.activity.id, cc.attrs.context.concat('.activity.').concat(actIterator.id).concat('.relatedActivities.').concat(relatedAct.activity.id).concat('.addButton'))}"
													process="@this"
													oncomplete="refreshCompetenceActivityWall();" />
											</div>
										</div>
									</div>
									
									<script>
									$(function(){
										$('.relatedActs .activity .title').shortenedText({showChar: 26, mode: 'static'});
										$('.relatedActs .activity .atcDesc').shortenedText({showChar: 70, mode: 'static'});
									});
									</script>
								</ui:repeat>
							</div>
						</h:panelGroup>
					</h:panelGroup>
					
					<div class="clear"></div>
				</h:panelGroup>
			</ui:repeat>
			
			<script>
				enableDropdown('.#{cc.attrs.value} .actBlock .actOptArrow');
				prosolo.overlay.reset();
			</script>
			<utilcomp:tooltip target=".hasTooltip[title]" />

			<script>
			function onCompPollUpdateComplete() {
				roundImages();
				$('.#{cc.attrs.value} .addCommentBox .inputTextFieldHidden').autosize();
				
				$('.expandable').shortenedText({showChar: 150});
				$('.actBlock .richContent .atcUrl').shortenedText({showChar: 35, mode: 'static'});
				$('.actBlock .description').shortenedText({
					showChar: 250, 
					mode: 'link',
					moreCallback: function(){
						sendServiceUse('MOUSE_CLICK', {context: 'learningProgress.ongoingLearning', link: 'more'});
					},
					lessCallback: function(){
						sendServiceUse('MOUSE_CLICK', {context: 'learningProgress.ongoingLearning', link: 'less'});
					}
				});
				$('.actBlock .richContent .atcDesc').shortenedText({
					showChar: 250, 
					mode: 'link',
					moreCallback: function(){
						
						sendServiceUse('MOUSE_CLICK', {context: 'learningProgress.ongoingLearning', link: 'more'});
					},
					lessCallback: function(){
						sendServiceUse('MOUSE_CLICK', {context: 'learningProgress.ongoingLearning', link: 'less'});
					}
				});
				
				$('.act div.addCommentBox').newcomment({
					watermark:'Add a comment',
				});
			};
			
			$(function() {
				onCompPollUpdateComplete();
			});
			</script>
		</h:panelGroup>
			
	</composite:implementation>
</ui:component>