<ui:component xmlns:h="http://java.sun.com/jsf/html"
			  xmlns:ui="http://java.sun.com/jsf/facelets"
			  xmlns:composite="http://java.sun.com/jsf/composite"
			  xmlns:util="http://www.prosolo.com/util"
			  xmlns:p="http://primefaces.org/ui"
			  xmlns:assessment="http://java.sun.com/jsf/composite/components/assessments"
			  xmlns:utilcomp="http://java.sun.com/jsf/composite/components/util"
			  xmlns:c="http://java.sun.com/jsp/jstl/core"
			  xmlns:f="http://java.sun.com/jsf/core"
>

	<composite:interface>
		<composite:attribute name="credentialId" required="true" />
		<composite:attribute name="learningContext" default="" />
	</composite:interface>

	<composite:implementation>
		<script>
            function hideConfirmDialog(dialogId) {
                $('#' + dialogId).modal('hide');
                $("body").removeAttr("class").removeAttr("style")
                $("div.modal-backdrop.fade.in").remove()
            }

            function markDiscussionAsSeen(assessmentId, el, resource) {
                switch (resource) {
                    case 'ACTIVITY':
                        markActivityDiscussionRead
                        ([{
                            name: 'assessmentEncId',
                            value: assessmentId
                        }]);
                        break;
                    case 'COMPETENCE':
                        markCompetenceAssessmentDiscussionRead
                        ([{
                            name: 'assessmentEncId',
                            value: assessmentId
                        }]);
                        break;
                }
                $(el).removeClass("hasNewComments");
            }

            //comment form hide/show
            function displaySubmitButton(inputElem) {
                if ($(inputElem).val().length == 0) {
                    $(inputElem).parent().find('a.btn-green').addClass('hidden');
                } else {
                    $(inputElem).parent().find('a.btn-green').removeClass('hidden');
                }
            }

            function displaySubmitButtonPrivateConvModal(inputElem) {
                if ($(inputElem).val().length == 0) {
                    $(inputElem).parent().find('a.btn-green').addClass('hidden');
                } else {
                    $(inputElem).parent().find('a.btn-green').removeClass('hidden');
                }
            }

		</script>

		<ui:param name="learningContext" value="#{'name:COMPETENCE|id:'.concat(competenceAssessmentBean.competenceAssessmentData.competenceId).concat('|context:/name:COMPETENCE_ASSESSMENT|id:').concat(competenceAssessmentBean.competenceAssessmentData.competenceAssessmentId).concat('/')}" />

		<h:form prependId="false" id="remoteCommandForm">
			<p:remoteCommand process="@this" action="#{competenceAssessmentBean.markActivityAssessmentDiscussionRead()}"
							 name="markActivityDiscussionRead"></p:remoteCommand>
			<p:remoteCommand process="@this" action="#{competenceAssessmentBean.markCompetenceAssessmentDiscussionRead()}"
							 name="markCompetenceAssessmentDiscussionRead"/>
		</h:form>

		<p:growl id="growlMain" showDetail="true" globalOnly="true"/>

		<div class="whiteBar">

		</div>

		<div class="container">
			<ui:fragment rendered="#{not empty param.credId}">
				<ol class="breadcrumb">
					<li>
						<h:link value="#{msg['label.credential.plural']}" outcome="credentialLibrary"/>
					</li>
					<li>
						<h:link
								value="#{competenceAssessmentBean.credentialTitle}"
								outcome="credential">
							<f:param name="id" value="#{param.credId}"></f:param>
						</h:link>
					</li>
					<li>
						<h:link
								value="#{competenceAssessmentBean.competenceAssessmentData.title}"
								outcome="competence">
							<f:param name="credId" value="#{param.credId}"/>
							<f:param name="compId" value="#{param.compId}"/>
						</h:link>
					</li>
					<li class="active">
						Assessments
					</li>
				</ol>
			</ui:fragment>
			<ui:fragment rendered="#{empty param.credId}">
				<ol class="breadcrumb">
					<li>
						<h:link
								value="#{competenceAssessmentBean.competenceAssessmentData.title}"
								outcome="competence">
							<f:param name="compId" value="#{param.compId}"/>
						</h:link>
					</li>
					<li class="active">
						Assessments
					</li>
				</ol>
			</ui:fragment>
		</div>

		<c:if test="#{competenceAssessmentBean.isUserAssessedStudentInCurrentContext()}">
			<assessment:competenceAssessmentStudentTabs
				selfAssessmentEnabled="#{competenceAssessmentBean.selfAssessmentEnabled}"
				peerAssessmentEnabled="#{competenceAssessmentBean.peerAssessmentEnabled}"
			/>
		</c:if>

		<div class="container">
			<div class="row">
				<div class="col-md-#{competenceAssessmentBean.competenceAssessmentData.type eq 'SELF_ASSESSMENT' ? '12' : '9'} mandatoryFlow">
					<h2 class="bottom10">Competence Assessment</h2>
					<ui:fragment rendered="#{competenceAssessmentBean.competenceAssessmentData.type ne 'SELF_ASSESSMENT'}">
						<p>This is the ${msg['label.competence'].toLowerCase()} assessment for student #{competenceAssessmentBean.competenceAssessmentData.studentFullName}.
							All comments between the student and the assessor are private.</p>
					</ui:fragment>

					<ui:fragment
							rendered="#{not empty competenceAssessmentBean.competenceAssessmentData.message}">
						<div class="whiteBox assessmentInitialMessage">
							<h2>Message</h2>
							<p>
								<h:outputText
										value="#{competenceAssessmentBean.competenceAssessmentData.message}"
										escape="false" />
							</p>
							<div class="clear"></div>
						</div>
					</ui:fragment>

					<assessment:competenceAssessment
							competenceAssessment="#{competenceAssessmentBean.competenceAssessmentData}"
							bean="#{competenceAssessmentBean}"
							credentialId="#{cc.attrs.credentialId}"
							role="USER"
							learningContext="#{cc.attrs.learningContext}"
							growlToUpdate=":#{cc.clientId}:growlMain"
							toUpdateGradePanel=":#{cc.clientId}:gradePanelContainer"
							gradePanelSidebarId="gradeSidebar"
							toUpdateRubricPanelForStudent=":#{cc.clientId}:rubricAssessmentPreview:panelRubricAssessment"
							toUpdatePrivateConversationModal=":#{cc.clientId}:commentModal:formPrivateConversation:panelModalPrivateConversation"
							currentUserAssessor="#{competenceAssessmentBean.isUserAssessorInCurrentContext()}"
							currentUserAssessedStudent="#{competenceAssessmentBean.isUserAssessedStudentInCurrentContext()}"
					/>
				</div>

				<h:panelGroup layout="block" rendered="#{competenceAssessmentBean.competenceAssessmentData.type ne 'SELF_ASSESSMENT'}" styleClass="col-md-3">
					<div class="sidebarBlock">
						<h2>Student</h2>
						<div class="user32">
							<a href="javascript:void(0);"> <utilcomp:userAvatar
									avatar="#{competenceAssessmentBean.competenceAssessmentData.studentAvatarUrl}"
									fullName="#{competenceAssessmentBean.competenceAssessmentData.studentFullName}" />
							</a>
							<h3>
								<a href="javascript:void(0);">#{competenceAssessmentBean.competenceAssessmentData.studentFullName}</a>
							</h3>
						</div>
					</div>

					<div class="sidebarBlock">
						<h2>Requested</h2>
						<p>#{competenceAssessmentBean.competenceAssessmentData.dateValue}</p>
					</div>
				</h:panelGroup>
			</div>

		</div>

		<assessment:assessmentCommentModal
				id="commentModal"
				toUpdate=":#{cc.clientId}:growlMain @(.assessmentActivityList.comp_#{competenceAssessmentBean.currentCompetenceAssessmentId}) @(.panelCompAssessment_#{competenceAssessmentBean.currentCompetenceAssessmentId})"
				messages="#{competenceAssessmentBean.currentAssessmentMessages}"
				bean="#{competenceAssessmentBean.currentAssessmentBean}"
				learningContext="#{competenceAssessmentBean.currentResType eq 'ACTIVITY'
					? util:addSubContext(cc.attrs.learningContext, 'name:competence|id:'.concat(activityAssessmentBean.activityAssessmentData.competenceId).concat('|context:/name:COMPETENCE_ASSESSMENT|id:').concat(activityAssessmentBean.activityAssessmentData.compAssessment.competenceAssessmentId).concat('|context:/name:activity|id:').concat(activityAssessmentBean.activityAssessmentData.activityId).concat('|context:/name:ACTIVITY_ASSESSMENT|id:').concat(activityAssessmentBean.activityAssessmentData.activityAssessmentId).concat('///'))
					: util:addSubContext(cc.attrs.learningContext, 'name:competence|id:'.concat(competenceAssessmentBean.competenceAssessmentData.competenceId).concat('|context:/name:COMPETENCE_ASSESSMENT|id:').concat(competenceAssessmentBean.competenceAssessmentData.competenceAssessmentId).concat('/'))}"
		/>

		<c:if test="#{competenceAssessmentBean.isUserAssessedStudentInCurrentContext() and not competenceAssessmentBean.isUserAssessorInCurrentContext()}">
			<assessment:rubricAssessmentPreview
					id="rubricAssessmentPreview"
					grade="#{competenceAssessmentBean.currentGradeData}"
					resourceType="#{competenceAssessmentBean.currentResType}"
					resourceTitle="#{competenceAssessmentBean.currentResTitle}"
			/>
		</c:if>

		<c:if test="#{competenceAssessmentBean.isUserAssessorInCurrentContext()}">
			<h:panelGroup id="gradePanelContainer">
				<ui:param name="compAssessmentLearningContext" value="#{util:addSubContext(learningContext, 'name:competence|id:'.concat(competenceAssessmentBean.competenceAssessmentData.competenceId).concat('|context:/name:COMPETENCE_ASSESSMENT|id:').concat(competenceAssessmentBean.competenceAssessmentData.competenceAssessmentId).concat('/'))}" />
				<ui:param name="activityAssessmentLearningContext" value="#{util:addSubContext(learningContext, 'name:competence|id:'.concat(activityAssessmentBean.activityAssessmentData.competenceId).concat('|context:/name:COMPETENCE_ASSESSMENT|id:').concat(activityAssessmentBean.activityAssessmentData.compAssessment.competenceAssessmentId).concat('|context:/name:ACTIVITY|id:').concat(activityAssessmentBean.activityAssessmentData.activityId).concat('|context:/name:ACTIVITY_ASSESSMENT|id:').concat(activityAssessmentBean.activityAssessmentData.activityAssessmentId).concat('///'))}" />

				<assessment:gradePanel
						id="resourceGradePanel"
						gradeActionMethodName="updateAssessmentGrade"
						gradeAction="#{competenceAssessmentBean.updateAssessmentGrade}"
						assessmentId="#{competenceAssessmentBean.currentAssessmentId}"
						completed="#{competenceAssessmentBean.hasStudentCompletedCurrentResource()}"
						gradeData="#{competenceAssessmentBean.currentGradeData}"
						resource="#{competenceAssessmentBean.currentResType}"
						resourceTitle="#{competenceAssessmentBean.currentResTitle}"
						toUpdate=":#{cc.clientId}:growlMain @(.assessmentActivityList.comp_#{competenceAssessmentBean.currentCompetenceAssessmentId}) @(.panelCompAssessment_#{competenceAssessmentBean.currentCompetenceAssessmentId}) @(.panelAssessorNotificationSelector)"
						learningContext="#{competenceAssessmentBean.currentResType == null ? '' : (competenceAssessmentBean.currentResType == 'COMPETENCE' ? compAssessmentLearningContext : activityAssessmentLearningContext)}"
						gradePanelSidebarId="gradeSidebar"
				/>
			</h:panelGroup>
		</c:if>
	</composite:implementation>
</ui:component>