<ui:component xmlns:h="http://java.sun.com/jsf/html"
			  xmlns:f="http://java.sun.com/jsf/core"
			  xmlns:ui="http://java.sun.com/jsf/facelets"
			  xmlns:composite="http://java.sun.com/jsf/composite"
			  xmlns:p="http://primefaces.org/ui"
			  xmlns:utilcomp="http://java.sun.com/jsf/composite/components/util"
			  xmlns:assessments="http://java.sun.com/jsf/composite/components/assessments"
			  xmlns:util="http://www.prosolo.com/util"
>

	<composite:interface>
		<composite:attribute name="resourceTitle" required="true" />
		<composite:attribute name="toUpdate" default=""/>
		<composite:attribute name="resource" required="true" />
		<composite:attribute name="bean" required="true" type="org.prosolo.web.assessments.AskForAssessmentBean" />
		<composite:attribute name="submitAssessmentRequestActionMethodName" required="true"/>
		<composite:attribute name="submitAssessmentRequestAction" required="true" method-signature="void #{cc.attrs.submitAssessmentRequestActionMethodName}()"/>
		<composite:attribute name="learningContext" default="" />
		<composite:attribute name="credentialId" default="0" type="java.lang.Long"/>
	</composite:interface>

	<composite:implementation>
		<script src="#{request.contextPath}/resources/javascript2/search.js"></script>
		<script src="https://use.typekit.net/zvv0dgl.js"></script>
		<script>
			try {
				Typekit.load({
					async : true
				});
			} catch (e) {
			}
		</script>
		<script>
			function hideAssesmentDialog(dialogId) {
				$('#' + dialogId).modal('hide');
				$("body").removeAttr("class").removeAttr("style")
				$("div.modal-backdrop.fade.in").remove()
			}
		</script>

		<div class="modal fade" id="askAssessmentPeer" tabindex="-1" role="dialog"
			aria-labelledby="askForAssessment">
			<div class="modal-dialog" role="document">
				<h:panelGroup layout="block" id="askForAssessmentPanel" styleClass="modal-content">
					<div class="modal-header alignLeft">
						<button type="button" class="close" data-dismiss="modal"
							aria-label="Close">
							<span aria-hidden="true">&#215;</span>
						</button>
						<h2 class="modal-title" id="askForAssessment">Ask for Assessment</h2>
					</div>

					<div class="assessmentModalMeta">
						<div class="assessmentModalMetaLine">
							<div class="assessmentModalMetaLeft">#{msg['label.'.concat(cc.attrs.resource.toLowerCase())]}:</div>
							<div class="assessmentModalMetaRight">
								<h3>#{cc.attrs.resourceTitle}</h3>
							</div>
						</div>

						<h:panelGroup layout="block" styleClass="assessmentModalMetaLine">
							<div class="assessmentModalMetaLeft">Ask to:</div>
							<h:panelGroup layuot="block" id="selectAssessor"
								class="assessmentModalMetaRight">
								<ui:fragment rendered="#{cc.attrs.bean.assessmentRequestData.assessorSet}">
									<assessments:assessmentActorAvatar
											actorId="#{cc.attrs.bean.assessmentRequestData.assessorId}"
											avatarUrl="#{cc.attrs.bean.assessmentRequestData.assessorAvatarUrl}"
											actorFullName="#{cc.attrs.bean.assessmentRequestData.assessorFullName}"
											blindAssessmentMode="#{cc.attrs.bean.blindAssessmentMode}"
											actorType="ASSESSOR"
											displayAnonymousActorUniqueId="false"
									/>
									<h3>
										<assessments:assessmentActorName
											actorId="#{cc.attrs.bean.assessmentRequestData.assessorId}"
											actorFullName="#{cc.attrs.bean.assessmentRequestData.assessorFullName}"
											blindAssessmentMode="#{cc.attrs.bean.blindAssessmentMode}"
											actorType="ASSESSOR"
											displayAnonymousActorUniqueId="false"
										/>
									</h3>
									<p:commandLink rendered="#{cc.attrs.bean.canStudentChooseAssessor()}" styleClass="removeX" process="@this"
												   action="#{cc.attrs.bean.resetPeerAssessor()}"
												   update=":#{cc.clientId}:selectAssessor :#{cc.clientId}:askForAssessmentPanelContent">
										Remove
									</p:commandLink>
								</ui:fragment>
								<ui:fragment rendered="#{not cc.attrs.bean.isAssessorAvailable()}">
									No assessor available
								</ui:fragment>
								<ui:fragment rendered="#{cc.attrs.bean.isAssessorAvailableThroughSearch()}">
									<h:inputText rendered="#{not cc.attrs.bean.assessmentRequestData.assessorSet}"
												 onkeyup="searchListener(execSearchUsers);"
												 value="#{cc.attrs.bean.peerSearchTerm}" id="newAssessorName"
												 placeholder="Type peer's name..." name="newAssessorName"
												 autocomplete="off"/>

									<p:remoteCommand name="execSearchUsers"
													 process="newAssessorName"
													 action="#{cc.attrs.bean.searchPeers()}"
													 update="usersListPanel"/>

									<p:commandLink styleClass="btn btn-green-stroke btn-sm"
												   rendered="#{not cc.attrs.bean.assessmentRequestData.assessorSet}"
												   value="Assign me assessor"
												   action="#{cc.attrs.bean.setPeerAssessorFromThePool()}"
												   update="selectAssessor :#{cc.clientId}:askForAssessmentPanelContent"/>

									<h:panelGroup id="usersListPanel">
										<h:panelGroup rendered="#{not cc.attrs.bean.assessmentRequestData.assessorSet and not empty cc.attrs.bean.peersForAssessment}">
											<ul id="usersList" class="dropdown-menu searchResultsDrop"
												style="display: block;">
												<ui:repeat value="#{cc.attrs.bean.peersForAssessment}"
														   var="user" varStatus="iterator">
													<li><p:commandLink style="cursor: pointer;"
																	   id="userlink-#{user.id}"
																	   action="#{cc.attrs.bean.setAssessor(user)}"
																	   update=":#{cc.clientId}:selectAssessor :#{cc.clientId}:askForAssessmentPanelContent">
														<utilcomp:userAvatar avatar="#{user.avatarUrl}"
																			 fullName="#{user.fullName}"/>
														<h3>#{user.fullName}</h3>
													</p:commandLink></li>
												</ui:repeat>
											</ul>
										</h:panelGroup>
									</h:panelGroup>
								</ui:fragment>
							</h:panelGroup>
						</h:panelGroup>
					</div>

					<h:panelGroup id="askForAssessmentPanelContent">
						<div class="modal-body alignLeft top30">

							<ui:fragment rendered="#{cc.attrs.bean.userAssessmentTokenData.assessmentTokensEnabled and cc.attrs.bean.assessmentRequestData.newAssessment}">
								<div class="tokensWrapper">
									This assessment request costs <div class="tokensNr">#{cc.attrs.bean.userAssessmentTokenData.numberOfTokensSpentPerRequest}</div> Assessment #{cc.attrs.bean.userAssessmentTokenData.numberOfTokensSpentPerRequest eq 1 ? 'Token' : 'Tokens'}.
								</div>

								<ui:fragment rendered="#{not cc.attrs.bean.userAssessmentTokenData.doesUserHaveEnoughTokensForOneRequest()}">
									<div class="alert alert-danger" role="alert">
										You don't have enough Assessment Tokens to send the assessment request<ui:fragment rendered="#{not cc.attrs.bean.assessmentRequestData.assessorSet}">. </ui:fragment>
										<ui:fragment rendered="#{cc.attrs.bean.assessmentRequestData.assessorSet}">
											to
											<assessments:assessmentActorName
													actorId="#{cc.attrs.bean.assessmentRequestData.assessorId}"
													actorFullName="#{cc.attrs.bean.assessmentRequestData.assessorFullName}"
													blindAssessmentMode="#{cc.attrs.bean.blindAssessmentMode}"
													actorType="ASSESSOR"
													displayAnonymousActorUniqueId="false"
											/>.
										</ui:fragment>
										<h:link outcome="/my-assessments-credentials" value="Click here"/> for more info.
									</div>
								</ui:fragment>
							</ui:fragment>

							<ui:fragment rendered="#{cc.attrs.bean.isNewAssessmentWithAvailableAssessorsNotYetChosen()}">
								<div class="alert alert-danger" role="alert">
									You need to select the assessor. Please use the search box or the Assign me assessor button to find one.
								</div>
							</ui:fragment>

							<ui:fragment rendered="#{cc.attrs.bean.isValidAssessmentRequestWithoutAssessorSet()}">
								<div class="alert alert-warning" role="alert">
									There is no available assessor at the moment. You can still submit an unassigned assessment request that will be assigned to the first available assessor when one appears.
									<ui:fragment rendered="#{cc.attrs.bean.userAssessmentTokenData.assessmentTokensEnabled}">
										By submitting this request you will still spend #{cc.attrs.bean.userAssessmentTokenData.numberOfTokensSpentPerRequest} #{cc.attrs.bean.userAssessmentTokenData.numberOfTokensSpentPerRequest eq 1 ? 'token' : 'tokens'}.
									</ui:fragment>
								</div>
							</ui:fragment>

							<ui:fragment rendered="#{cc.attrs.bean.isNewAssessmentRequestWithoutAvailableAssessorWithExistingUnassignedAssessment()}">
								<div class="alert alert-danger" role="alert">
									You cannot submit the assessment request. There is no available assessor at the moment, and you have already submitted an unassigned assessment request that will be assigned to the first available assessor when one appears. After this request is assigned to an assessor, you can make a new assessment request.
								</div>
							</ui:fragment>

							<p>
								<ui:param name="peerBlindAssessment" value="#{cc.attrs.bean.isPeerBlindAssessment()}"/>
								<ui:param name="existingAssessmentWithAssessorSet" value="#{cc.attrs.bean.assessmentRequestData.assessorSet and not cc.attrs.bean.assessmentRequestData.newAssessment}"/>
								<ui:fragment rendered="#{peerBlindAssessment}">
									All peer assessments are blinded (peer assessor identity is hidden to you).
								</ui:fragment>
								<ui:fragment rendered="#{existingAssessmentWithAssessorSet}">
									<ui:fragment rendered="#{cc.attrs.bean.assessmentType eq 'INSTRUCTOR_ASSESSMENT'}">
										Are you sure you want to notify your #{msg['label.instructor'].toLowerCase()} to assess your #{msg['label.'.concat(cc.attrs.resource.toLowerCase())].toLowerCase()}?
									</ui:fragment>
									<ui:fragment rendered="#{cc.attrs.bean.assessmentType eq 'PEER_ASSESSMENT'}">
										<ui:fragment rendered="#{peerBlindAssessment}">
											<br/><br/>
										</ui:fragment>
										You have already sent an assessment request to
										<assessments:assessmentActorName
												actorId="#{cc.attrs.bean.assessmentRequestData.assessorId}"
												actorFullName="#{cc.attrs.bean.assessmentRequestData.assessorFullName}"
												blindAssessmentMode="#{cc.attrs.bean.blindAssessmentMode}"
												actorType="ASSESSOR"
												displayAnonymousActorUniqueId="false"
										/>
										and the request is pending. Clicking the Submit button will send a notification to
										<assessments:assessmentActorName
												actorId="#{cc.attrs.bean.assessmentRequestData.assessorId}"
												actorFullName="#{cc.attrs.bean.assessmentRequestData.assessorFullName}"
												blindAssessmentMode="#{cc.attrs.bean.blindAssessmentMode}"
												actorType="ASSESSOR"
												displayAnonymousActorUniqueId="false"
										/>
										that you want the assessment to be completed.
									</ui:fragment>
								</ui:fragment>
								<ui:fragment rendered="#{not cc.attrs.bean.assessmentRequestData.assessorSet and cc.attrs.bean.assessmentType eq 'INSTRUCTOR_ASSESSMENT'}">
									You don't have a #{msg['label.instructor'].toLowerCase()} assigned yet.
									<ui:fragment rendered="#{cc.attrs.resource eq 'COMPETENCE' and cc.attrs.bean.isStudentCanChooseInstructor()}">
										Go to the
										<h:link outcome="/credential" value="#{msg['label.credential'].toLowerCase()} page">
											<f:param name="id" value="#{util:encodeId(cc.attrs.bean.credentialId)}"/>
										</h:link>
										and choose your #{msg['label.instructor'].toLowerCase()}.
									</ui:fragment>
								</ui:fragment>
								<ui:fragment rendered="#{cc.attrs.bean.isValidRequest() and cc.attrs.bean.remindStudentToSubmitEvidenceSummary}">
									<ui:fragment rendered="#{peerBlindAssessment or existingAssessmentWithAssessorSet}">
										<br/><br/>
									</ui:fragment>
									<ui:fragment rendered="#{cc.attrs.resource eq 'COMPETENCE'}">
										Make sure you have added an appropriate summary of your evidence on the
										<h:link outcome="/competence"
												target="_blank"
												value="#{msg['label.competence'].toLowerCase()} page">
											<f:param name="credId" value="#{util:encodeId(cc.attrs.bean.credentialId gt 0 ? cc.attrs.bean.credentialId : cc.attrs.credentialId)}" disable="#{cc.attrs.bean.credentialId eq 0 and cc.attrs.credentialId eq 0}"/>
											<f:param name="compId" value="#{util:encodeId(cc.attrs.bean.resourceId)}"/>
										</h:link>
										that will be visible to the assessor during the assessment.
									</ui:fragment>
									<ui:fragment rendered="#{cc.attrs.resource eq 'CREDENTIAL'}">
										Make sure you have added an appropriate summary of your evidence for all #{msg['label.competence.plural'].toLowerCase()} that will be visible to the assessor during the assessment.
									</ui:fragment>
								</ui:fragment>
							</p>
						</div>

						<div class="modal-footer alignLeft">
							<utilcomp:singleClickLink
									rendered="#{cc.attrs.bean.isValidRequest()}"
									process="@this"
									onclick="showLoaderNextToElem(this, '#{request.contextPath}')"
									update="#{cc.attrs.toUpdate} :panelHeaderNumberOfTokens"
									action="#{cc.attrs.submitAssessmentRequestAction}"
									styleClass="btn btn-green"
									oncomplete="hideAssesmentDialog('askAssessmentPeer')">
								<f:param name="page" value="#{facesContext.viewRoot.viewId}"></f:param>
								<f:param name="learningContext" value="#{cc.attrs.learningContext}"></f:param>
								<f:param name="service" value="name:ask_for_assessment_dialog"></f:param>
								Submit
							</utilcomp:singleClickLink>
							<a href="#" class="btn btn-default" data-dismiss="modal">Close</a>
						</div>
					</h:panelGroup>
				</h:panelGroup>
			</div>
		</div>
		<p:remoteCommand name="resetAskForAssessmentModal"
			action="#{cc.attrs.bean.resetAskForAssessmentModal()}"
			update="selectAssessor askForAssessmentPanelContent" />

		<script>
			$('#askAssessmentPeer').on('shown.bs.modal', function() {
				$('#credential\\:formMain\\:newAssessorName').focus();
			}).on('hidden.bs.modal', function() {
				resetAskForAssessmentModal();
			})
		</script>
	</composite:implementation>
</ui:component>