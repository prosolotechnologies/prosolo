<ui:component
		xmlns:ui="http://java.sun.com/jsf/facelets"
		xmlns:h="http://java.sun.com/jsf/html"
		xmlns:f="http://java.sun.com/jsf/core"
		xmlns:p="http://primefaces.org/ui"
		xmlns:composite="http://java.sun.com/jsf/composite"
		xmlns:util="http://www.prosolo.com/util"
		xmlns:jsf="http://xmlns.jcp.org/jsf"
		xmlns:pt="http://xmlns.jcp.org/jsf/passthrough"
		xmlns:c="http://java.sun.com/jsp/jstl/core">

	<composite:interface>
		<composite:attribute name="gradeActionMethodName" required="true"/>
		<composite:attribute name="gradeAction" required="true" method-signature="void #{cc.attrs.gradeActionMethodName}()"/>
		<composite:attribute name="assessment" required="true" type="org.prosolo.services.nodes.data.assessments.ActivityAssessmentData"/>
		<composite:attribute name="toUpdate" default=""/>
		<composite:attribute name="learningContext" default=""/>
	</composite:interface>
	
	<composite:implementation>
		<script src="#{request.contextPath}/resources/javascript2/activityAssessment.js"></script>
		<div class="cbp-spmenu cbp-spmenu-vertical cbp-spmenu-right rubricsSidebar" id="cbp-spmenu-s2">
			<h:panelGroup id="gradePanel">
				<ui:fragment rendered="#{not empty cc.attrs.assessment}">
					<a href="javascript:void(0);" onclick="hidePopupSidebar('#cbp-spmenu-s2')" class="removeX">Close</a>
					<h2>Grade</h2>
					<ui:fragment rendered="#{not cc.attrs.assessment.completed}">
						<p>Uncompleted activity can not be graded</p>
					</ui:fragment>
					<ui:fragment rendered="#{cc.attrs.assessment.completed and cc.attrs.assessment.grade.gradingMode eq 'AUTOMATIC_BY_COMPLETION'}">
						<p>Student automatically gets the maximum points on activity completion.</p>
					</ui:fragment>
					<ui:fragment rendered="#{cc.attrs.assessment.completed and cc.attrs.assessment.grade.gradingMode eq 'AUTOMATIC_BY_EXTERNAL_TOOL'}">
						<p>Student automatically gets points from the external activity</p>
					</ui:fragment>
					<ui:fragment rendered="#{cc.attrs.assessment.completed and (cc.attrs.assessment.grade.gradingMode eq 'MANUAL_SIMPLE' or cc.attrs.assessment.grade.gradingMode eq 'MANUAL_RUBRIC')}">
						<h:form id="formGradeModal">
							<ui:fragment rendered="#{cc.attrs.assessment.grade.gradingMode eq 'MANUAL_SIMPLE'}">
								<!-- manual grading - NO rubrics start -->
								<div class="sliderBox">
									<div class="sliderWrapper">
										<input type="text" id="gradeSlider" class="gradeSlider" />
									</div>
									<h:inputText value="#{cc.attrs.assessment.grade.value}" id="gradeValue" class="sliderValueInput" />
									<script>
										var gradeSlider = $("#gradeSlider").bootstrapSlider({
											id: 'gradeSlider',
											min: #{cc.attrs.assessment.grade.minGrade},
											max: #{cc.attrs.assessment.grade.maxGrade},
											value: #{cc.attrs.assessment.grade.value > 0 ? cc.attrs.assessment.grade.value : 0},
											tooltip: 'hide'
										});
										gradeSlider.bootstrapSlider('on', 'change', function(){
											$('.sliderValueInput').val(gradeSlider.bootstrapSlider('getValue'));
										});
										$('.sliderValueInput').bind('propertychange change click keyup input paste', function() {
											gradeSlider.bootstrapSlider('setValue', parseInt($(this).val()));
										});
									</script>
								</div>
								<!-- manual grading - NO rubrics end -->
							</ui:fragment>
							<ui:fragment rendered="#{cc.attrs.assessment.grade.gradingMode eq 'MANUAL_RUBRIC'}">
								<!-- manual grading - WITH rubrics start -->
								<ui:repeat value="#{cc.attrs.assessment.grade.rubric.criteria}" var="c">
									<h3>#{c.name}</h3>
									<div class="radioGroup">
										<ui:repeat value="#{c.levels}" var="l">
											<div class="radio">
												<c:if test="#{cc.attrs.assessment.grade.rubric.rubricType eq 'POINT'}">
													<input type="radio" jsf:id="lvlRadio" data-points="#{l.points}"
														   name="#{hiddenLvlRadio.clientId}"
														   value="#{l.id}"
														   jsf:checked="#{c.levelId eq l.id ? true : false}"
														   onchange="sumAndDisplayPoints()"
													/>
												</c:if>
												<c:if test="#{cc.attrs.assessment.grade.rubric.rubricType eq 'DESCRIPTIVE'}">
													<input type="radio" jsf:id="lvlRadio"
														   name="#{hiddenLvlRadio.clientId}"
														   value="#{l.id}"
														   jsf:checked="#{c.levelId eq l.id ? true : false}"
													/>
												</c:if>
												<h:outputLabel for="lvlRadio">#{l.name} <h:panelGroup rendered="#{cc.attrs.assessment.grade.rubric.rubricType eq 'POINT'}" styleClass="points">(#{l.points} #{l.points eq 1 ? 'point' : 'points'})</h:panelGroup> <h:panelGroup rendered="#{not empty l.description}" styleClass="iconInfo" pt:data-toggle="tooltip" pt:title="#{l.description}">info</h:panelGroup></h:outputLabel>
											</div>
										</ui:repeat>
										<h:inputHidden id="categoryLevelSelection" binding="#{hiddenLvlRadio}" value="#{c.levelId}" validator="greaterThanZeroValidator">
											<f:attribute name="msg" value="Criterion must be graded" />
										</h:inputHidden>
										<small class="redText">
											<h:panelGroup id="panelValidationMsg" styleClass="validationMsgSelector">
												<h:message id="msgCategoryLevel" for="categoryLevelSelection"/>
											</h:panelGroup>
										</small>
									</div>
									<h:inputTextarea placeholder="Type comments here (optional)..." value="#{c.comment}"/>
								</ui:repeat>
								<c:if test="#{cc.attrs.assessment.grade.rubric.rubricType eq 'POINT'}">
									<p class="totalPoints"><strong>Total Points: <span id="spanTotalPoints">#{cc.attrs.assessment.grade.value != null and cc.attrs.assessment.grade.assessed ? cc.attrs.assessment.grade.value : '-'}</span></strong></p>
								</c:if>
								<!-- manual grading - WITH rubrics end -->
							</ui:fragment>
							<p:commandLink
									styleClass="btn btn-green"
									action="#{cc.attrs.gradeAction}"
									update="#{cc.attrs.toUpdate} @(.validationMsgSelector)"
									oncomplete="if (args &amp;&amp; !args.validationFailed) { hidePopupSidebar('#cbp-spmenu-s2') }">
								<f:param name="page" value="#{facesContext.viewRoot.viewId}"></f:param>
								<f:param name="learningContext" value="#{util:addSubContext(cc.attrs.learningContext, &#34;name:activity_assessment|id:&#34;.concat(util:decodeId(cc.attrs.assessment.encodedDiscussionId)))}"></f:param>
								<f:param name="service" value="name:activity_grade_dialog"></f:param>
								Save Changes
							</p:commandLink>
						</h:form>
					</ui:fragment>
				</ui:fragment>
			</h:panelGroup>
		</div>
	</composite:implementation>
</ui:component>